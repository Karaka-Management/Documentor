<?php

namespace Documentor\src\Application;

use Documentor\src\Application\Controllers\MainController;
use Documentor\src\Application\Controllers\DocumentationController;
use Documentor\src\Application\Controllers\CodeCoverageController;
use Documentor\src\Application\Controllers\UnitTestController;
use phpOMS\System\File\Directory;
use phpOMS\Utils\ArrayUtils;
use phpOMS\Utils\StringUtils;

class Application
{
    private $DocumentationController = null;
    private $codeCoverageController = null;
    private $unitTestController = null;
    private $guideController = null;

    public function __construct(array $argv)
    {
        $help         = ArrayUtils::getArg('-h', $argv);
        $source       = ArrayUtils::getArg('-s', $argv);
        $destination  = ArrayUtils::getArg('-d', $argv);

        if(isset($help) || !isset($source) || !isset($destination)) {
            $this->printUsage();
        } else {
            $this->createDocumentation($source, $destination, $argv);
        }
    }

    private function createDocumentation(string $source, string $destination, array $argv)
    {
        $unitTest     = ArrayUtils::getArg('-u', $argv);
        $codeCoverage = ArrayUtils::getArg('-c', $argv);
        $guide        = ArrayUtils::getArg('-g', $argv);
        $sources      = new Directory($source, '*');

        $this->mainVController        = new MainController($destination);
        $this->codeCoverageController = new CodeCoverageController($destination, $codeCoverage);
        $this->unitTestController     = new UnitTestController($destination, $unitTest);
        $this->docController          = new DocumentationController($destination, $this->codeCoverageController, $this->unitTestController);
        $this->guideController        = new GuideController($destination, $guide);

        $this->parse($sources);
        $this->docController->createTableOfContents();
        $this->docController->createSearchSet();
    }

    private function printUsage() 
    {
        echo 'Usage: -s <SOURCE_PATH> -d <DESTINATION_PATH> -c <COVERAGE_PATH>' . "\n\n";
        echo "\t" . '-s Source path of the code to create the documentation from.' . "\n";
        echo "\t" . '-d Destination of the finished documentation.' . "\n";
        echo "\t" . '-c Code coverage xml log generated by `coverage-clover` in PHPUnit.' . "\n";
    }

    private function parse(Directory $sources)
    {
        foreach ($sources as $source) {
            if ($source instanceof Directory) {
                $this->parse($source);
            } elseif (StringUtils::endsWith($source->getPath(), '.php')) {
                $this->docController->parse($source);
            }
        }
    }
}